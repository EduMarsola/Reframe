resquest : mantem as informações da requisição
response : recebe as informações da resposta
    .write(string texto) -> escreve o texto na página
    .end() -> finaliza a requisição


server = createServer ((request, response) => {função})
    recebe o request e response e passa a função a ser execultada
    .listen(int porta) -> execulta a API quando a porta for chamada ex: .listen(3333) || localhost:3333



package.json : configurações do node, cria de fabrica ao usar npm node 
    "dev" : "node --watch --no-warnings server.js" -> cria uma execulção do código ao usar "npm run dev" no terminal



comandos de terminal
    node arquivo.ext -> execulta o arquivo
        --watch -> ao salvar o arquivo já atualiza na página
    npm install "" -> intala a dependencia pelo gerenciador de pacotes



fastify : microframework do node
    npm intall fastify -> instala no projeto
        cria os arquivos "node_modules" e "package-lock.json"


http
    .get : pega o registro
    .post : cria o registro
    .put : alteração de tudo
    .patch : alteração especifica
    .delete : deleta o registro
    pode ser usado a mesma rota com o comando diferente
        server.post('/video', () => {})
        server.get('/video', () => {})
        server.put('/video/:id')
        server.delete('/video/:id', () => {})
        //Route parameter ':id' adiciona como parametro de busca
 

banco de dados em memoria
    guarda na ram da aplicação, perde quando reinicia
    somente para teste


set : não aceita duplicatas
map : aceita duplicatas e é tratado como objeto
    .set(chave, valor) -> relaciona a chave ao valor descrito
    .values() -> devolve os objetos
    .entrys() -> retorna os ids e os objetos em forma de arrays

node:crypto
    randomUUID -> universal unique ID (id único universal)

extenção rest client
    criar arquivo .http
    cria uma rota com o comando desejado, por padrão vai get    
        POST http://localhost:3333/videos
    configurar requisição   
        POST http://localhost:3333/videos
        Content-Type: application/json //tipo de dado aceito
        Accept-Language: pt //linguagem que sera mandada ao back end 
        {
            "titulo" : "video1"
        } //corpo do dado 


request body
    envia o corpo de um formulário

Short Sintax
    const {tittle, description, duration} = request.body
    console.log(body)
    database.create({
        tittle : tittle,
        description : description,
        duration : duration,
    })

    --vira--

    const {tittle, description, duration} = request.body
    console.log(body)
    database.create({
        tittle,
        description,
        duration,
    })

query parameters
    opcionais para listagem
    GET http://localhost:3333/videos?search=node : devolve os dados onde a palavra node aparece
    no metodo GET(JS) temos para usar o search
        server.get('/videos', (request, reply) => {
            const serch = request.query
            console.log(serch)
            const videos = database.list()
            return videos
        })
